{"ast":null,"code":"var _jsxFileName = \"/Users/fugamaejima/\\u7F6E\\u304D\\u5834/my-color-code-game/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getRandomColor = () => {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\nconst App = () => {\n  _s();\n  const [color, setColor] = useState('');\n  const [userColor, setUserColor] = useState('');\n  const [result, setResult] = useState('');\n  useEffect(() => {\n    setNewColor();\n  }, []);\n  const setNewColor = () => {\n    const randomColor = getRandomColor();\n    setColor(randomColor);\n    setUserColor('');\n    setResult('');\n  };\n  const checkColor = () => {\n    const rgbToHex = rgb => {\n      let hex = Number(rgb).toString(16);\n      if (hex.length < 2) {\n        hex = \"0\" + hex;\n      }\n      return hex;\n    };\n    const fullColorHex = (r, g, b) => {\n      const red = rgbToHex(r);\n      const green = rgbToHex(g);\n      const blue = rgbToHex(b);\n      return `#${red}${green}${blue}`;\n    };\n    const rgb = color.match(/\\d+/g);\n    const hexColor = fullColorHex(rgb[0], rgb[1], rgb[2]);\n    if (!userColor) {\n      setResult(`正解は ${color}`);\n    } else if (userColor.toUpperCase() === color.toUpperCase()) {\n      setResult('Correct!');\n    } else {\n      setResult(`違うよ! 正解の色は ${color}だよ`);\n    }\n    setNewColor();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"colorCircle\",\n      style: {\n        backgroundColor: color\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"colorInput\",\n      value: userColor,\n      placeholder: \"#000000\",\n      onChange: e => setUserColor(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkColor,\n      children: \"Check Color\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"result\",\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"j/4kz+cDEl77VbpYMb/80n3rFJc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","getRandomColor","letters","color","i","Math","floor","random","App","_s","setColor","userColor","setUserColor","result","setResult","setNewColor","randomColor","checkColor","rgbToHex","rgb","hex","Number","toString","length","fullColorHex","r","g","b","red","green","blue","match","hexColor","toUpperCase","className","children","id","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","type","value","placeholder","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/fugamaejima/置き場/my-color-code-game/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst getRandomColor = () => {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\nconst App = () => {\n  const [color, setColor] = useState('');\n  const [userColor, setUserColor] = useState('');\n  const [result, setResult] = useState('');\n\n  useEffect(() => {\n    setNewColor();\n  }, []);\n\n  const setNewColor = () => {\n    const randomColor = getRandomColor();\n    setColor(randomColor);\n    setUserColor('');\n    setResult('');\n  };\n\n  const checkColor = () => {\n    const rgbToHex = (rgb) => {\n      let hex = Number(rgb).toString(16);\n      if (hex.length < 2) {\n        hex = \"0\" + hex;\n      }\n      return hex;\n    };\n\n    const fullColorHex = (r, g, b) => {\n      const red = rgbToHex(r);\n      const green = rgbToHex(g);\n      const blue = rgbToHex(b);\n      return `#${red}${green}${blue}`;\n    };\n\n    const rgb = color.match(/\\d+/g);\n    const hexColor = fullColorHex(rgb[0], rgb[1], rgb[2]);\n\n    if (!userColor) {\n      setResult(`正解は ${color}`);\n    } else if (userColor.toUpperCase() === color.toUpperCase()) {\n      setResult('Correct!');\n    } else {\n      setResult(`違うよ! 正解の色は ${color}だよ`);\n    }\n    setNewColor();\n  };\n\n  return (\n    <div className=\"container\">\n      <div id=\"colorCircle\" style={{ backgroundColor: color }}></div>\n      <input\n        type=\"text\"\n        id=\"colorInput\"\n        value={userColor}\n        placeholder=\"#000000\"\n        onChange={(e) => setUserColor(e.target.value)}\n      />\n      <button onClick={checkColor}>Check Color</button>\n      <p id=\"result\">{result}</p>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMC,OAAO,GAAG,kBAAkB;EAClC,IAAIC,KAAK,GAAG,GAAG;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BD,KAAK,IAAID,OAAO,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;EAClD;EACA,OAAOJ,KAAK;AACd,CAAC;AAED,MAAMK,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACN,KAAK,EAAEO,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACgB,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACdiB,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,WAAW,GAAGf,cAAc,CAAC,CAAC;IACpCS,QAAQ,CAACM,WAAW,CAAC;IACrBJ,YAAY,CAAC,EAAE,CAAC;IAChBE,SAAS,CAAC,EAAE,CAAC;EACf,CAAC;EAED,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,QAAQ,GAAIC,GAAG,IAAK;MACxB,IAAIC,GAAG,GAAGC,MAAM,CAACF,GAAG,CAAC,CAACG,QAAQ,CAAC,EAAE,CAAC;MAClC,IAAIF,GAAG,CAACG,MAAM,GAAG,CAAC,EAAE;QAClBH,GAAG,GAAG,GAAG,GAAGA,GAAG;MACjB;MACA,OAAOA,GAAG;IACZ,CAAC;IAED,MAAMI,YAAY,GAAGA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,KAAK;MAChC,MAAMC,GAAG,GAAGV,QAAQ,CAACO,CAAC,CAAC;MACvB,MAAMI,KAAK,GAAGX,QAAQ,CAACQ,CAAC,CAAC;MACzB,MAAMI,IAAI,GAAGZ,QAAQ,CAACS,CAAC,CAAC;MACxB,OAAO,IAAIC,GAAG,GAAGC,KAAK,GAAGC,IAAI,EAAE;IACjC,CAAC;IAED,MAAMX,GAAG,GAAGhB,KAAK,CAAC4B,KAAK,CAAC,MAAM,CAAC;IAC/B,MAAMC,QAAQ,GAAGR,YAAY,CAACL,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC;IAErD,IAAI,CAACR,SAAS,EAAE;MACdG,SAAS,CAAC,OAAOX,KAAK,EAAE,CAAC;IAC3B,CAAC,MAAM,IAAIQ,SAAS,CAACsB,WAAW,CAAC,CAAC,KAAK9B,KAAK,CAAC8B,WAAW,CAAC,CAAC,EAAE;MAC1DnB,SAAS,CAAC,UAAU,CAAC;IACvB,CAAC,MAAM;MACLA,SAAS,CAAC,cAAcX,KAAK,IAAI,CAAC;IACpC;IACAY,WAAW,CAAC,CAAC;EACf,CAAC;EAED,oBACEf,OAAA;IAAKkC,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBnC,OAAA;MAAKoC,EAAE,EAAC,aAAa;MAACC,KAAK,EAAE;QAAEC,eAAe,EAAEnC;MAAM;IAAE;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC/D1C,OAAA;MACE2C,IAAI,EAAC,MAAM;MACXP,EAAE,EAAC,YAAY;MACfQ,KAAK,EAAEjC,SAAU;MACjBkC,WAAW,EAAC,SAAS;MACrBC,QAAQ,EAAGC,CAAC,IAAKnC,YAAY,CAACmC,CAAC,CAACC,MAAM,CAACJ,KAAK;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC,eACF1C,OAAA;MAAQiD,OAAO,EAAEhC,UAAW;MAAAkB,QAAA,EAAC;IAAW;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACjD1C,OAAA;MAAGoC,EAAE,EAAC,QAAQ;MAAAD,QAAA,EAAEtB;IAAM;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEV,CAAC;AAACjC,EAAA,CA3DID,GAAG;AAAA0C,EAAA,GAAH1C,GAAG;AA6DT,eAAeA,GAAG;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}